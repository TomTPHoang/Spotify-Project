@model List<Spotify_Project.Models.Song>
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Tracks</title>
    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <style>
        button {
            background-color: #1DB954;
            color: #fff;
            border: none;
            border-radius: 50px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            button:hover {
                background-color: #1AA34A;
            }

            button:focus {
                outline: none;
            }

        /* Center alignment */
        #game {
            text-align: center;
        }

        #play-snippet, #replay-snippet, #submit-guess {
            margin-top: 10px;
            margin-right: 5px;
        }

        /* Result styling */
        #result {
            font-size: 24px;
            font-weight: bold;
            margin-top: 15px;
            text-align: center;
            color: #1DB954;
            transition: opacity 0.5s ease;
        }

            #result.incorrect {
                color: red;
            }
    </style>
</head>

<body>
    <h1>Your Tracks</h1>

    @if (!Model.Any())
    {
        <p>No tracks available to display.</p>
        <p>Access Token from ViewBag: @ViewBag.AccessToken</p>
    }
    else
    {
        <div id="game">
            <h2>Guess the Song!</h2>
            <p id="hint">Press "Play Snippet" to start</p>
            <button id="play-snippet">Play Snippet</button>
            <button id="replay-snippet">Replay Snippet</button>
            <br>
            <input type="text" id="guess" placeholder="Your Guess" />
            <button id="submit-guess">Submit Guess</button>
            <p id="result"></p>
        </div>
    }

    <script>
        let spotifyUsername = null;

        async function fetchSpotifyUsername() {
            try {
                const response = await fetch('/Game/GetSpotifyUsername');
                const data = await response.json();

                if (data.success) {
                    spotifyUsername = data.username;
                    console.log("Spotify Username:", spotifyUsername);
                } else {
                    console.error("Failed to fetch Spotify username:", data.error);
                }
            } catch (error) {
                console.error("Error fetching Spotify username:", error);
            }
        }

        fetchSpotifyUsername();

        console.log("JavaScript loaded and executing.");
        let token = '@ViewData["AccessToken"]';
        console.log("Access Token in Razor View:", token);

        if (!token || token === 'undefined') {
            console.error("Access Token is missing in Razor View. Check the controller logic.");
        }

        let currentSong = null;
        let lastStartTime = null; // Track the start time of the last snippet played

        window.onSpotifyWebPlaybackSDKReady = () => {
            console.log("Spotify Web Playback SDK is ready.");
            console.log("Token being passed to SDK:", token);

            const player = new Spotify.Player({
                name: 'My Web Player',
                getOAuthToken: (cb) => { cb(token); },
                volume: 0.1,
            });

            player.addListener('ready', ({ device_id }) => {
                console.log("Player is ready with Device ID:", device_id);
                window.spotifyDeviceId = device_id;
            });

            player.addListener('not_ready', ({ device_id }) => {
                console.warn("Player went offline with Device ID:", device_id);
            });

            player.connect().then(success => {
                if (success) {
                    console.log("Spotify Player connected successfully.");
                } else {
                    console.error("Failed to connect Spotify Player.");
                }
            });
        };

        // Fetch a random song from the backend
        async function fetchRandomSong() {
            try {
                console.log("Fetching a random song...");
                const response = await fetch('/Game/RandomSong', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                    },
                });

                if (!response.ok) {
                    console.error("Failed to fetch random song. Status:", response.status);
                    alert("Failed to fetch a random song. Please try again.");
                    return null;
                }

                const song = await response.json();

                if (!song || !song.spotifyUri) {
                    console.error("Random song does not contain a SpotifyUri field:", song);
                    alert("Failed to retrieve a valid song. Please try again.");
                    return null;
                }

                currentSong = {
                    Title: song.title,
                    Artist: song.artist,
                    Album: song.album,
                    SpotifyUri: song.spotifyUri,
                };
                return song;
            } catch (error) {
                console.error("Error fetching random song:", error);
                return null;
            }
        }

        // Play a snippet of the selected song
        function playSnippet(songUri, startTime) {
            const deviceId = window.spotifyDeviceId;
            if (!deviceId) {
                console.error("Device ID not set. Ensure Web Playback SDK is connected.");
                alert("The Spotify player is not ready. Please wait or refresh the page.");
                return;
            }

            // Transfer Playback to Web Player
            fetch(`https://api.spotify.com/v1/me/player`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    device_ids: [deviceId],
                    play: false,
                }),
            }).then(response => {
                if (response.ok) {
                    fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            uris: [songUri],
                            position_ms: startTime,
                        }),
                    }).then(playResponse => {
                        if (playResponse.ok) {
                            setTimeout(() => {
                                fetch(`https://api.spotify.com/v1/me/player/pause`, {
                                    method: 'PUT',
                                    headers: {
                                        'Authorization': `Bearer ${token}`,
                                    },
                                });
                            }, 10000);
                        } else {
                            console.error("Failed to play snippet:", playResponse);
                        }
                    });
                }
            });
        }

        // Handle Play Snippet button click
        document.getElementById('play-snippet').addEventListener('click', async () => {
            const song = await fetchRandomSong();
            if (!song) {
                alert('No songs available!');
                return;
            }

            // Generate a random start time for the snippet (within 90 seconds of the song)
            const randomStartTime = Math.floor(Math.random() * 90000);
            lastStartTime = randomStartTime;

            if (!song.spotifyUri) {
                alert("Cannot play this song. Please try another.");
                return;
            }

            // Play the snippet
            playSnippet(song.spotifyUri, randomStartTime);
        });

        // Handle Replay Snippet button click
        document.getElementById('replay-snippet').addEventListener('click', () => {
            if (!currentSong || !currentSong.SpotifyUri) {
                alert("No song is currently loaded to replay.");
                return;
            }

            if (lastStartTime === null) {
                alert("No snippet has been played yet to replay.");
                return;
            }

            // Replay the last snippet
            playSnippet(currentSong.SpotifyUri, lastStartTime);
        });


        // Handle Submit Guess button click
        document.getElementById('submit-guess').addEventListener('click', async () => {
            const userGuess = document.getElementById('guess').value.trim();
            const result = document.getElementById('result');

            // Check if the guess is empty
            if (!userGuess) {
                result.innerText = "Please enter a guess!";
                result.className = '';
                result.style.color = 'yellow';
                result.style.opacity = 1;
                return;
            }

            // Check if the song is loaded
            if (!currentSong || !currentSong.Title) {
                result.innerText = "No song is currently playing!";
                result.className = '';
                result.style.color = 'yellow';
                result.style.opacity = 1;
                return;
            }

            const isCorrect = userGuess.toLowerCase() === currentSong.Title.toLowerCase();

            if (isCorrect) {
                result.innerText = 'Correct! 🎉';
                result.className = '';
                result.style.color = 'green';
                result.style.opacity = 1;
            }
            else {
                result.innerText = `Incorrect! The correct answer was "${currentSong.Title}".`;
                result.className = 'incorrect';
                result.style.color = 'red';
                result.style.opacity = 1;
            }

            // Check if the guess is correct
            // if (userGuess.toLowerCase() === currentSong.Title.toLowerCase()) {
            //     result.innerText = 'Correct! 🎉';
            //     result.className = '';
            //     result.style.color = 'green';
            //     result.style.opacity = 1;
            // } else {
            //     result.innerText = `Incorrect! The correct answer was "${currentSong.Title}".`;
            //     result.className = 'incorrect';
            //     result.style.color = 'red';
            //     result.style.opacity = 1;
            // }

            // Send the guess result to the server
            try {
                const response = await fetch('/Game/UpdateGuessResult', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        username: spotifyUsername,
                        isCorrect: isCorrect
                    })
                });

                const data = await response.json();
                if (!data.success) {
                    console.error('Failed to update guess result on the server.');
                }
            } catch (error) {
                console.error('Error updating guess result:', error);
            }

            // Automatically hide the result after 3 seconds
            setTimeout(() => {
                result.style.opacity = 0;
            }, 3000);

            // Clear the input field
            document.getElementById('guess').value = '';
        });
    </script>
</body>
</html>
